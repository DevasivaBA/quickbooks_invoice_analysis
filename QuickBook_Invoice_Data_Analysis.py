# -*- coding: utf-8 -*-
"""Untitled17.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1_qsu6v0jlQaejTB4DqjUp2w0Ww4xspSM
"""

import pandas as pd
import re
import os

def load_data(file_path, encoding='cp1252'):
    """Loads invoice data from a CSV file with the specified encoding."""
    return pd.read_csv(file_path, encoding=encoding)

def clean_data(df):
    """Cleans and standardizes the invoice DataFrame."""
    # Remove summary and header rows
    df = df[~df['Type'].astype(str).str.contains('Total|Name', na=False)]

    # Drop rows with all missing values (these might be empty rows)
    df = df.dropna(how='all')

    # Standardize column names (remove spaces, replace with underscores)
    df.columns = [col.strip().replace(" ", "_") if isinstance(col, str) else col for col in df.columns]

    # Rename specific columns
    df = df.rename(columns={'Unnamed:_0': 'Temp', 'U/M': 'U_M'})
    # Remove the temporary column (likely the unnamed column)
    df.drop('Temp', axis=1, errors='ignore', inplace=True)

    # Split into credit memos and invoices based on 'Type' column
    credit_memo = df[df['Type'] == 'Credit Memo'].copy()
    invoice = df[df['Type'] == 'Invoice'].copy()

    return credit_memo, invoice

def process_invoices(invoice_df):
    """Processes the invoice DataFrame."""
    # Reorder columns (move 'Name' to second position)
    invoice_df.insert(1, 'Name', invoice_df.pop('Name'))

    # Rename 'Num' to 'Invoice_Number'
    invoice_df.rename(columns={'Num': 'Invoice_Number'}, inplace=True)

    # Extract item descriptions within parentheses
    invoice_df['Description'] = invoice_df['Item'].astype(str).str.extract(r'\((.*)')

    # Remove parentheses and their contents and leading/trailing spaces from 'Item'
    invoice_df['Item'] = invoice_df['Item'].astype(str).str.replace(r'\(.*', '', regex=True).str.strip()

    # Create a copy of the invoice DataFrame before filtering
    invoice_df_filtered = invoice_df.copy()

    # Filter for invoices without numeric item tags
    invoices_without_tags = invoice_df_filtered[invoice_df_filtered['Item'].astype(str).str.replace(' ', '').apply(lambda x: x.isalpha())]

    # Filter for invoices with numeric item tags
    invoices_with_tags = invoice_df_filtered[~invoice_df_filtered['Item'].astype(str).str.replace(' ', '').apply(lambda x: x.isalpha())]

    return invoices_with_tags, invoices_without_tags


def save_data(df, file_path):
    """Saves the DataFrame to a CSV file, creating directories if necessary."""
    base_dir = os.path.dirname(file_path)
    if not os.path.exists(base_dir):
        os.makedirs(base_dir)
    df.to_csv(file_path, index=False)

# Main script execution
if __name__ == "__main__":
    file_path = 'data/raw/invoice_data.csv'  # Update with your actual path
    raw_data = load_data(file_path)
    credit_memo, invoice = clean_data(raw_data)
    invoices_with_tags, invoices_without_tags = process_invoices(invoice)
    # Create directories if they do not exist
    os.makedirs('data/processed/', exist_ok=True)
    # Save the DataFrames to separate CSV files
    save_data(credit_memo, 'data/processed/credit_memo.csv')
    save_data(invoices_with_tags, 'data/processed/invoices_with_tags.csv')
    save_data(invoices_without_tags, 'data/processed/invoices_without_tags.csv')